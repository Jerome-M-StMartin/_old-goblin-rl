/* Concept: An object owned by the GUI struct which accesses ECS data and displays that
 * data in the HUD dynamically.
 *
 */

use std::any::Any;

use bracket_terminal::prelude::{Point, BTerm};

pub struct WidgetStorage {
    data: Vec<Box<dyn IsWidget>>, //arbitrarily chose 8, could only think of 6 but we'll see...
}

impl WidgetStorage {
    fn new() -> Self {
        WidgetStorage {
            data: Vec::new(),
        }
    }

    fn tick(&self, ctx: &mut BTerm) { //draw_all(), basically
        for widget in self.data.iter() {
            widget.draw(ctx);
        }
    }

    fn add(&mut self, widget: dyn IsWidget) -> Result<_, WidgetError> {
        
    }
}

//replaces gui::Drawable
pub trait IsWidget {
    fn draw(&self, ctx: &mut BTerm);
    fn move_to(&mut self, pos: Point);
    fn as_any(&self) -> &dyn Any;
}

pub struct WidgetError {}
