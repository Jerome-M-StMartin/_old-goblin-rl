Do Next:
- Item Card & Inventory System:
- - Made Changes to Main RunState::ContextMenu match arm
- (!) Breakthrough Inventory Management Concept: (!)
  Store all Inventory data in a Binary Tree.
  Each layer corresponds to a subdivision of inventory which would typically
  be separate structres like "backpack", "hands", "bandolier", "pockets",
  "equipment", etc.
  Non-modal; exactly one layer is ALWAYS selected throughout the game.
  Root Layer: When this layer is selected, inventory GUI is an in-hud "loading
  bar" styled 1D-Array representation showing used and unused proportions of
  inventory space by weight. MAX_WEIGHT is a static int stored in the root
  struct.
  Layer 1: (2 Nodes) LeftHand, RightHand
  Layer 2: (4 Nodes) Quickbar/Scabbard/Bandolier/Quiver/etc.
  Layer 3: (8 Nodes) Equipped Equipment
  Layer 4: (16 Nodes) Backpack
  Item's depth in the tree determines the AP cost of accessing the item.
  AP Cost = (Layer# - 1) (no items are stored in root/zero layer, this is hud
  gui data and behaviour only)
- Spellbook (in Inventory node-menu)
- Door interaction system (stuff already moved from player.rs)
- Get to new Turn System in Tutorial to use as foundation.
- New AP-based Turn System
- Implement Burning effect for Torch melee, etc.
- Weapon Attack Mode Switching
- AI
- ProcGen Improvement
- Intro Area + Write the Walkthrough for it
- RNG Equipment/Weapons: I think this needs to be a priority. Even if there
  was only one enemy type, having a plethora of unique weapons to choose from,
  even if -- no -- especically because 99% of those items will be trash. It's
  the search for and eventual discovery of the 1% that creates emergent story for

TEST:
- Bloodstains & Bleeding: Give Orcs 12hp & make Longswords common.

-------------------------------------------------------------------------------

DESIGN PILLARS:
- Behaviour Tree AI
- Puzzles! Physical path unlocks and boss-battle behavior patterns.
- Spawned Bosses & Story Bosses!
- Multiple Attack Modes per Weapon
- Language-based user-customizable spellcasting!
- WASM: Core, do not work on any below pillar without completing this.
- Party-Based Singleplayer stretch_goal(& Multiplayer?)!
Done:
- Universal Context-Menu
- Typed Damage/Resistances/Immunities

PLAN:
- Refactor & implement features as they interest me, look back to RLTK
  Tutorial for inspiration & implementation proof-of-concepts.
- Planned & Unimplemented Features: State-Based or Behaviour Tree NPC AI
				    Chests w/ RNG Contents
				    EXTREMELY Rare Mimics (0.001%)
				    Non-RNG Story - Player as Hero
				    Non-RNG Persistent World Zones
					Ethakiak, Pale Mountain
				    RNG Zones - Wandering Wastes, Rainlands
				    Spellweaving Metalanguage - Atheirei
				    Teleportation
				    NPC Neutrals/Friendlies/Allies
				    Town & Boss Battle Music
				    Tiny Creatures that you must attack
					from within inventory w/ c_menu!
				    Pillar: WASM!
- Feature Creep:  Morality System
		  Player as Villian
		  Machine Learning/Neural Networks
		  Multiplayer
		  SFX
		  Music beyond Town & Boss Battle Music

Marketing & Image:
- Develop _basic_ webside to host the following three things and these things
  only.
	1.) A rust-wasm rolling-release in-browser playable version 1.0 of
	    WotOT.
	2.) A short-form textual dev b/log.
	3.) A Beautifully Simple Landing Page

Music: (Rule: Cannot be "well-known" in order to preserve immersion.)
Miroirs - Maurice Ravel

KNOWN-UKNOWN BUGS:

AT THE END I WILL HAVE...:
- Lovingly Cultivated my Focus and Discipline
- Learned much about Rust
- Learned much about ECS Architecture
- Learned much about Game Dev
- Learned much about Roguelikes
- Learned much about VIM
- Learned much about working from the Linux Terminal.
------------------------------------------------------------------------------

DESIGN NOTES:
- Damage & MeleeIntent: Damage is particulate, the smallest quantity being a
  DamageAtom enum which holds exactly one of several damage types and a value.
	MeleeIntent is added first to a creature that wants to attack, then
	the intent propogates to that creature's equipment. Behind the scenes,
	each item individually applies its own damage. They are agregated into
	a Vec<DamageAtom> before being filtered by Resistances and applied to
	the MeleeIntent target' stats.
- Status Damage:
  DamageAtom::Bleed/Poison/Suffocation/etc first remove FP before reducing HP.


SOLVED PROBLEMS:
- THE GREAT MISUNDERSTANDING
I have been assuming that UseIntent attaches to the Item entity, but in fact
it attaches to the Creature entity who is using the item. 
- IMPLEMENTING STATE INTO MENUS
Appeared daunting but it turns out I have the skills to implement this. Now
the inventory menu has two States: select items-in-backpack or select equipped
items.
- GLOBAL TOGGLE-ABLE TOOLTIPS
Fell into the impossible attempt of trying to create a boolean toggle without
initializing the variable out of scope.
- WASD-CURSOR - 6/14/2020
- TEXT CONFUSION - 6/17/2020
simple8x8 text resource not 1:1 with cp_437 standards. Was confusing.
- UNIVERSAL CONTEXT MENU - 6/18/2020
- NESTED PLAYER MENU - 6/21/20
- Started Summer Courses @ WWU - 6/23/20
- SWAPPED STORAGE NAMES BUG - 6/24/20
