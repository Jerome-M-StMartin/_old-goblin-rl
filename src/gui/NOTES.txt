TO-LEARN:
1.) ?

TO-DO:
1.) Replace player::player_input with gui::user_input implementation?
    So make gui::user_input.rs into its own module. Right? I think so.
	Actually, first check if I can & should be passing all user
	input through the GUI module. This does make a certain sense.
2.) Verify if implementing Drawable on ECS components is possible.
	Wrong! This is NOT the ECS way! I need a GUIDrawSystem which
	operates on Entities with an attached Drawable component.
	No need to impl anything on components, as that would make
	them object-like, with logic as well as data. Components
	are meant to be data only.
3.) Draw basic UI (log, hp, etc) with gui module

4.) (Obsolete under new IntoTheBreach/FTL/Wind&WiltingBlossom-esk design.)
    Build complete 'infocard' with mock RPG data representing character stats & inventory.
---------------------------------
DONE.) ScrollBar Prototype v1
DONE.) Drawable Observers
DONE.) Input Handler + Observer Pattern (w/ Focus System)
DONE.) Generic Type Node.payloads
DONE.) serde_yaml
DONE.) Command Pattern (impl on Cursor)
DONE.) Get cursor onto screen with user interactability via Command Pattern.
DONE.) Finish re-re-implementation of the Command Pattern
DONE.) Implement Drawables
DONE.) changed impl Observable to hold its Observers in a Mutex<Weak<dyn Observers>>.



YAML:
Writing this to help cement my understanding of YAML,
and how I will be using it here.

I will be using serde-yaml, which itself uses yaml-rust.

- yaml-rust: This one converts between String and yaml::Yaml.
- serde-yaml: This one converts between rust data structures and yaml::Yaml.

	So yaml::Yaml is of the String type, but specifically in the yaml format.

NOTE: No need to use yaml-rust directly. If, for some reason, you need to
convert from yaml into a String you may call serde_yaml::to_string()
which, I think, calls yaml-rust::to_string() internally.

Basic How-To:

fn myFn() -> Result<(), serde_yaml::Error> {
	let point: Point = Point { x: 0, y: 0};
	let serialized_point = serde_yaml::to_string(&point)?;
	let deserialized_point: Point = serde_yaml::from_str(&serialized_point)?;
	Ok(())
}

In order to write Yaml manually that can be deserialized, it has to match the
format that serde-yaml expects. It seems that the best way would be to start
with a Rust struct, convert it to a yaml String, see what the format is, and
copy that format to write more of them directly in yaml.


